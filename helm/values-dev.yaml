microservice-chart:
  namespace: "nodo"
  nameOverride: ""
  fullnameOverride: "wisp-soap-converter"
  image:
    repository: ghcr.io/pagopa/pagopa-wisp-soap-converter
    tag: 0.3.3-201-PIDM-492-workload-identity-helm-7
  terminationGracePeriodSeconds: 140
  livenessProbe:
    handlerType: httpGet
    httpGet:
      path: /alive
      port: 8558
    initialDelaySeconds: 60
    failureThreshold: 10
    periodSeconds: 5
  readinessProbe:
    handlerType: httpGet
    httpGet:
      path: /ready
      port: 8558
    initialDelaySeconds: 60
    failureThreshold: 10
    periodSeconds: 5
  deployment:
    create: true
    replicas: 1
  serviceMonitor:
    create: true
    endpoints:
      - interval: 10s #micrometer
        targetPort: 9092
        path: /
      - interval: 10s #cinnamon
        targetPort: 9091
        path: /metrics
  ports:
    - 8080 #http
    - 8558 #akka-management
    - 9091 #cinnamon
    - 9092 #micrometer
    - 3000 #jmx debug port
  service:
    type: ClusterIP
    ports:
      - 8080 #http
      - 9091 #cinnamon
      - 9092 #micrometer
  ingress:
    create: true
    host: "weudev.nodo.internal.dev.platform.pagopa.it"
    path: /wisp-soapconverter/(.*)
    annotations: {nginx.ingress.kubernetes.io/proxy-read-timeout: '130'}
    # proxyBodySize: 100m
  tmpVolumeMount:
    create: true
  serviceAccount:
    name: "nodo-workload-identity"
  azure:
    workloadIdentityClientId: <workload-identity-client-id-set-automatically-by-gha>
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - all
  resources:
    requests:
      memory: "512M"
      cpu: "512m"
    limits:
      memory: "2Gi"
      cpu: "900m"
  autoscaling:
    enable: true
    minReplica: 1
    maxReplica: 1
    triggers:
      - type: cpu
        metricType: Utilization
        metadata:
          value: "70"
      - type: memory
        metricType: Utilization
        metadata:
          value: "80"
    advanced:
      horizontalPodAutoscalerConfig:
        behavior:
          scaleDown:
            stabilizationWindowSeconds: 300
            policies:
              - type: Pods
                value: 1
                periodSeconds: 20
          scaleUp:
            stabilizationWindowSeconds: 0
            policies:
              - type: Percent
                value: 100
                periodSeconds: 20
  configMapFromFile:
      config-app.conf: |
        reference {
          akka {
            management {
              http {
                hostname = 127.0.0.1
                hostname = ${?MANAGEMENT_HTTP_HOST}
                port = 8558
                port = ${?MANAGEMENT_HTTP_PORT}
                bind-hostname = 0.0.0.0
                bind-hostname = ${?MANAGEMENT_HTTP_BIND_HOST}
                bind-port = 8558
                bind-port = ${?MANAGEMENT_HTTP_BIND_PORT}
              }
            }
            remote {
              artery {
                transport = tcp
                canonical{
                  hostname = 127.0.0.1
                  hostname = ${?REMOTING_HOST}
                  port = 2552
                  port = ${?REMOTING_PORT}
                }
                bind {
                  hostname = 127.0.0.1
                  hostname = ${?REMOTING_BIND_HOST}
                  port = 2552
                  port = ${?REMOTING_BIND_PORT}
                }
                advanced {
                  maximum-frame-size = 16 MiB
                }
              }
              log-remote-lifecycle-events = off
            }

            coordinated-shutdown {
              phases {
                service-requests-done {
                  timeout=135s
                }
                before-actor-system-terminate {
                    timeout=30s
                }
              }
            }
            coordinated-shutdown.exit-jvm = on

            loggers = ["akka.event.slf4j.Slf4jLogger"]
            loglevel = "DEBUG"
            logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

            http {
              host-connection-pool {
                max-open-requests = 2048
                max-retries = 0
                max-connection-backoff = 1000 ms
                max-connections = 100
              }
              server.parsing.max-content-length = 120m
              server.parsing.max-chunk-size= 120m
              client.parsing.max-chunk-size= 120m
            }
          }
          cinnamon {
            akka {
              actors {
                "/user/*" {
                  report-by = class
                }
              }
            }
            prometheus {
              exporters += http-server
              http-server {
                host = 127.0.0.1
                host = ${?PROMETHEUS_HOST}
                port = 9091
                port = ${?PROMETHEUS_PORT}
              }
            }
            slf4j.mdc {
              serialization.limit = 2048 bytes
            }
          }
          cinnamon.akka.http.servers {
            "*:*" {
              paths {
                "*" {
                  metrics = on
                }
              }
            }
          }
          cinnamon.akka.http.clients {
            "*:*" {
              paths {
                "*" {
                  metrics = on
                }
              }
            }
          }
          azurestorage-dispatcher {
            type = Dispatcher
            executor = "thread-pool-executor"
            thread-pool-executor {
            fixed-pool-size = 16
            }
            throughput = 1
          }
          config{
            http {
              server-request-timeout = 125
              connect-timeout = 1
            }
          }
        }
        app {
            apiConfigCache{
                url=${API_CONFIG_CACHE_URL}
                keys=""
                subscriptionKey=${API_CONFIG_CACHE_SUBSCRIPTION_KEY}
                timeout=60
            }
          adapterEcommerce{
              url=${ADAPTER_ECOMMERCE_URL}
          }
            pdd-host-header-name=X-Original-Forwarded-For
            configScheduleMinutes=1
            coordinatedShutdown=true
            waitAsyncProcesses=true
            coordinatedShutdownHttpTimeout=130
            coordinatedShutdownTerminationTimeout=20
            routing.useMetrics=true
            bundle.startup.timeout=120
            bundle.checkUTF8=false
            bundleTimeoutSeconds=600#10 minuti
            reXmlLog=${RE_XML_LOG_ACTIVE}
            reJsonLog=${RE_JSON_LOG_ACTIVE}
            azure-storage {
                blob-name = ${AZURE_STORAGE_BLOB_NAME}
                table-name = ${AZURE_STORAGE_TABLE_NAME}
                connection-string = ${AZURE_STORAGE_CONNECTION_STRING}
            }
          azure-cosmos-data {
            endpoint = ${AZURE_COSMOS_ENDPOINT}
            key = ${AZURE_COSMOS_KEY}
            db-name = ${AZURE_COSMOS_DB_NAME}
            table-name = ${AZURE_COSMOS_TABLE_NAME_DATA}
            consistency-level = "BOUNDED_STALENESS"
          }
          azure-cosmos-events {
            endpoint = ${AZURE_COSMOS_ENDPOINT}
            key = ${AZURE_COSMOS_KEY}
            db-name = ${AZURE_COSMOS_DB_NAME}
            table-name = ${AZURE_COSMOS_TABLE_NAME_EVENTS}
          }
            azure-cosmos-receipts-rt {
                endpoint = ${AZURE_COSMOS_ENDPOINT}
                key = ${AZURE_COSMOS_KEY}
                db-name = ${AZURE_COSMOS_DB_NAME}
                table-name = ${AZURE_COSMOS_TABLE_NAME_RECEIPTS_RT}
            }
            micrometer {
                http-server {
                    host = 127.0.0.1
                    host = ${?MICROMETER_HOST}
                    port = 9092
                    port = ${?MICROMETER_PORT}
                    hostname = "wispsoapconverter-micrometer"
                    hostname = ${?MICROMETER_HOSTNAME}
                }
            }
        }      
      logback.xml:  |
        <?xml version="1.0" encoding="UTF-8"?>
        <configuration scan="true" scanPeriod="30 seconds">

            <conversionRule conversionWord="bundleVersion"
                            converterClass="it.gov.pagopa.common.util.log.BundleVersionConverter" />

            <!--
            <property name="CONSOLE_COLOR_LOG_PATTERN" value="%cyan(%d) %highlight(%-5level) %green([%X{sessionId}]) %green([%logger]) - %msg %magenta([%X{akkaSource}]%n)"/>
            -->
            <property name="CONSOLE_PATTERN" value="%d %-5level [sid:%X{sessionId}] [can:%X{idCanale}] [sta:%X{idStazione}] [%logger] - %msg [%X{akkaSource}]%n"/>


            <appender name="CONSOLE_APPENDER" class="ch.qos.logback.core.ConsoleAppender">

                <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers>
                        <message/>
                        <nestedField>
                            <fieldName>app</fieldName>
                            <providers>
                                <timestamp>
                                    <fieldName>apptimestamp</fieldName>
                                </timestamp>
                                <loggerName/>
                                <threadName/>
                                <logLevel/>
                                <logLevelValue/>
                                <stackTrace/>
                                <mdc>
                                    <excludeMdcKeyName>elapsed</excludeMdcKeyName>
                                </mdc>
                                <tags/>
                                <pattern>
                                    <omitEmptyFields>true</omitEmptyFields>
                                    <pattern>
                                        {
                                        "elapsed": "#asLong{%mdc{elapsed}}"
                                        }
                                    </pattern>
                                </pattern>
                            </providers>
                        </nestedField>
                    </providers>
                </encoder>

            </appender>

            <appender name="CONSOLE_APPENDER_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
                <appender-ref ref="CONSOLE_APPENDER" />
            </appender>

            <logger name="it.gov.pagopa" level="INFO" />

            <root level="INFO">
                <appender-ref ref="CONSOLE_APPENDER_ASYNC" />
            </root>

        </configuration>                
  envConfig:
    SERVICE_IDENTIFIER: "WSC001"
    AZURE_INSIGHTS_ENABLED: "true"
    APPLICATIONINSIGHTS_ROLE_NAME: "wispsoapconverter"
    MANAGEMENT_HTTP_PORT: "8558"
    MANAGEMENT_HTTP_BIND_HOST: "0.0.0.0"
    MANAGEMENT_HTTP_BIND_PORT: "8558"
    SERVICE_HTTP_PORT: "8080"
    SERVICE_HTTP_BIND_HOST: "0.0.0.0"
    SERVICE_HTTP_BIND_PORT: "8080"
    PROMETHEUS_HOST: "0.0.0.0"
    PROMETHEUS_PORT: "9091"
    MICROMETER_HOST: "0.0.0.0"
    MICROMETER_PORT: "9092"
    TZ: "Europe/Rome"
    AKKA_SYSTEM_NAME: "wispsoapconverter"
    JAVA_OPTS: >-
      -Xmx1780m -Xms64m -Dlogback.configurationFile=/mnt/file-config/logback.xml -Dconfig.app=/mnt/file-config/config-app.conf -Duser.language=it  -Duser.country=IT -Duser.timezone=Europe/Rome -Dfile.encoding=UTF-8 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=3000 -Dcom.sun.management.jmxremote.rmi.port=3000 -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
    INSTANCE: DEV
    API_CONFIG_CACHE_URL: "https://api.dev.platform.pagopa.it/api-config-cache/p/v1/stakeholders/wisp/cache/schemas/v1"
    AZURE_COSMOS_ENDPOINT: "https://pagopa-d-weu-nodo-wispconv-cosmos-account.documents.azure.com:443/"
    AZURE_STORAGE_BLOB_NAME: "payloads"
    AZURE_STORAGE_TABLE_NAME: "events"
    AZURE_COSMOS_DB_NAME: "wispconverter"
    AZURE_COSMOS_TABLE_NAME_DATA: "data"
    AZURE_COSMOS_TABLE_NAME_EVENTS: "re"
    AZURE_COSMOS_TABLE_NAME_RECEIPTS_RT: "receipts-rt"
    ADAPTER_ECOMMERCE_URL: "https://dev.wisp2.pagopa.it/wisp-converter/redirect/api/v1/payments?idSession=REPLACE"
    RE_XML_LOG_ACTIVE: "false"
    RE_JSON_LOG_ACTIVE: "true"
  envFieldRef:
    MANAGEMENT_HTTP_HOST: "status.podIP"
    SERVICE_HTTP_HOST: "status.podIP"
    MICROMETER_HOSTNAME: "metadata.name"
    NAMESPACE: "metadata.namespace"
    CINNAMON_HOST: "metadata.name"
    APP_VERSION: "metadata.labels['app.kubernetes.io/version']"
    APP_NAME: "metadata.labels['app.kubernetes.io/name']"
  envSecret:
    APPLICATIONINSIGHTS_CONNECTION_STRING: "azure-insight-connection-string"
    API_CONFIG_CACHE_SUBSCRIPTION_KEY: "api-config-cache-subscription-key-string"
    AZURE_COSMOS_KEY: "cosmosdb-wisp-converter-account-key"
    AZURE_STORAGE_CONNECTION_STRING: "wisp-converter-re-sa-connection-string-key"
  keyvault:
    name: "pagopa-d-nodo-kv"
    tenantId: "7788edaf-0346-4068-9d79-c868aed15b3d"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node_type
                operator: In
                values:
                  - user
  canaryDelivery:
    create: false
