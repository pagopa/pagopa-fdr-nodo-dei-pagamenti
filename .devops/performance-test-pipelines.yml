# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-22.04'

parameters:
  - name: env
    displayName: Environment to Run Test
    type: string
    default: prf
  - name: blacklistCTStr
    displayName: Blacklist for CT ( default run only TC03.07 )
    type: string
    default: "TC01.03 TC02.03 TC02.04 TC02.05 TC03.05 TC03.06 TC04.01 TC04.02 TC04.03 TC04.04 TC04.05 TC04.06 TC04.07 TC04.08 TC04.09 TC04.10 TC05.01_new_new TC05.01_new_old TC05.02_new_new TC05.02_new_old TC05.03_new_new TC05.03_new_old TC05.04_new_new TC05.04_new_old"
  - name: debugEnabled
    type: boolean
    default: false
  - name: rampingSel
    displayName: Ramping rate to use
    type: string
    default: skip
    values:
      - skip
      - rampa_1_1_1
      - rampa_1_1_10
      - rampa_1_10_10
      - rampa_4_40_10
      - rampa_10_350_10_1
      - rampa_20_200_10_1
      - rampa_10_100_10
      - rampa_30_300_10
      - rampa_30_300_10_1
      - rampa_50_500_10
      - rampa_50_500_10_1
      - rampa_125_350_10_1
      - rampa_125_350_10_2
      - rampa_piatta
      - rampa_50
  - name: rps
    displayName: request x seconds
    type: string
    default: 100 # 100 req x sec
  - name: total_time
    displayName: seconds
    type: string
    default: 600 # 10min

resources:
  repositories:
    - repository: InTestRepo
      type: github
      endpoint: io-azure-devops-github-rw
      name: pagopa/pagopa-nodo-dei-pagamenti-test
      ref: NOD-32-integrazione-nelle-pipeline # da parametrizzare

variables:
  ${{ if eq(parameters.env, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_DEV_AZURE_SERVICE_CONNECTION)'
    KEY_VAULT_NAME: 'pagopa-d-nodo-kv'
#    deploy-pool: TODO
  ${{ elseif eq(parameters.env, 'prf') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_UAT_AZURE_SERVICE_CONNECTION)'
    KEY_VAULT_NAME: 'pagopa-u-nodo-kv'
#    deploy-pool: TODO


stages:
  - stage: run_test
    pool: "pagopa-uat-loadtest-linux"
    displayName: "Run performance test (${{ parameters.env }})"
#    pool: $(deploy-pool)
    jobs:
      - job: prepare_run_test
        displayName: "Prepare and run K6 tests env (${{ parameters.env }})"
        timeoutInMinutes: 0 # how long to run the job before automatically cancelling. When 0 is specified, the maximum limit is used
        steps:
          - checkout: InTestRepo
            clean: true
            persistCredentials: true

#          - task: AzureKeyVault@2
#            displayName: "Get secrets"
#            inputs:
#              azureSubscription: UAT-PAGOPA-SERVICE-CONN # TODO use var
#              keyVaultName: $(KEY_VAULT_NAME)
#              secretsFilter: 'SUBSCRIPTION-KEY-NDP'

          - script: |
              docker compose -p "ndp-k6" up -d --remove-orphans --force-recreate --build
            displayName: "Install nginx"

          - script: |
              cd $(Pipeline.Workspace)
              mkdir k6
              cd k6
              wget -c https://github.com/grafana/k6/releases/download/v0.42.0/k6-v0.42.0-linux-amd64.deb
              sudo dpkg -i k6-v0.42.0-linux-amd64.deb
            displayName: "Install k6"
          - script: |
              
              echo "rampingSel> ${{ parameters.rampingSel }}"
              if [[ "${{ parameters.rampingSel }}" == "skip" ]]; then
                echo "Skip use cusotm config .... "
                write_config () {
              
                  file_path=$1
                  ramp_rps=$2
                  ramp_total_time=$3
                
                  total_time_div_10=$(($ramp_total_time/10))
                  rps_div_10=$(($ramp_rps/10))
                
                  echo "[{" > $file_path 
                  echo "     \"Scalino_CT_1\": $((rps_div_10*1))," >> $file_path 
                  echo "     \"Scalino_CT_TIME_1\": ${  total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_2\": $((rps_div_10*2))," >> $file_path
                  echo "     \"Scalino_CT_TIME_2\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_3\": $((rps_div_10*3))," >> $file_path
                  echo "     \"Scalino_CT_TIME_3\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_4\": $((rps_div_10*4))," >> $file_path
                  echo "     \"Scalino_CT_TIME_4\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_5\": $((rps_div_10*5))," >> $file_path
                  echo "     \"Scalino_CT_TIME_5\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_6\": $((rps_div_10*6))," >> $file_path
                  echo "     \"Scalino_CT_TIME_6\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_7\": $((rps_div_10*7))," >> $file_path
                  echo "     \"Scalino_CT_TIME_7\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_8\": $((rps_div_10*8))," >> $file_path
                  echo "     \"Scalino_CT_TIME_8\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_9\": $((rps_div_10*9))," >> $file_path
                  echo "     \"Scalino_CT_TIME_9\": ${total_time_div_10}," >> $file_path
                  echo "     \"Scalino_CT_10\": $((rps_div_10*10))," >> $file_path
                  echo "     \"Scalino_CT_TIME_10\": ${total_time_div_10}" >> $file_path
                  echo "}]" >> $file_path
            
                }              
                output=$(pwd)/src/perf-test/k6/cfg/rampa_custom.json
                write_config ${output} ${{ parameters.rps }} ${{ parameters.total_time }}
                rampingSel=$(basename $output .json)
              else
                echo "USE config .... "
                rampingSel=${{ parameters.rampingSel }}
              fi
              
              cat $(pwd)/src/perf-test/k6/cfg/${rampingSel}.json
                          
              executeScript()
              {
                active_scenario=$1
                active_test=$2
                test_step=${rampingSel}
              
                envTest="pagoPA_PERF_apim_REAL"
              
                echo -----------------------------------------
                echo *** Main K6 Perf Test Script ***
                echo -----------------------------------------
              
                echo configured active_scenario = $active_scenario
                echo configured active_test = $active_test
                echo configured test_step= $test_step
                echo configured envTest= $envTest
              
                filename=$(date +%m_%d_%y)$active_test.csv
                echo debugEnabled ${{ parameters.debugEnabled }}
                debugParam=""
                if [[ " ${{ parameters.debugEnabled }} " == " True " ]]; then
                  echo "debugParam is True" 
                  debugParam="-v"
                fi
                echo debugParam is $debugParam

                # K6_INFLUXDB_CONCURRENT_WRITES=6 K6_INFLUXDB_PUSH_INTERVAL=5s k6 run --out csv=src/perf-test/k6/scenarios/$active_scenario/test/output/$filename -e scenario=$scenario -e test=$active_test -e steps=$test_step -e env=$envTest src/perf-test/k6/scenarios/$active_scenario/test/$active_test.js -e outdir=src/perf-test/k6/scenarios/$active_scenario/test/output --out influxdb=http://k6nodo:siametricssiametricssiametrics@10.101.132.117:8086/k6nodo
                k6 run --out csv=src/perf-test/k6/scenarios/$active_scenario/test/output/$filename \
                  -e scenario=$scenario -e test=$active_test -e steps=$test_step -e env=$envTest \
                  src/perf-test/k6/scenarios/$active_scenario/test/$active_test.js \
                  -e outdir=src/perf-test/k6/scenarios/$active_scenario/test/output \
                  --out influxdb=http://localhost:8086/nodo_ndp_datastorek6 \
                  -e SUBSCRIPTION_KEY=0f45790079eb45e0b526d15faaf58d95 -v
              
              }
              echo env selected:
              echo ${{ parameters.env }}
              echo ramping selected:
              echo ${{ parameters.rampingSel }}

              scenarioToRun=CT
              
              #clean and create output directory
              rm -rf src/perf-test/k6/scenarios/CT/test/output
              
              mkdir -p src/perf-test/k6/scenarios/CT/test/output
              
              blacklistCT=(${{ parameters.blacklistCTStr }})

              #for each script
              for d in src/perf-test/k6/scenarios/CT/test/*.js; do
              
                      #removing prefix path: removing prefix ending with slash
                      active_test=${d#src/perf-test/k6/scenarios/CT/test/*}
              
                      #removing suffix js
                      active_test=${active_test%.js}
              
              
                      if [[ " ${blacklistCT[*]} " =~ " ${active_test} " ]]; then
                              #skip script if it is blacklisted for CT
                              echo $active_test blacklisted
                      else
                              #call function to execute the script
                              executeScript CT ${active_test}
                      fi
                            
              done
              
              #remove old data
              rm -rf CT
              
              #create output folder structure
              mkdir -p CT
              #copy out
              cp -r src/perf-test/k6/scenarios/CT/test/output CT
              
              #remove empty folder
              #find output -type d -empty -delete
              
              echo current directory:
              pwd

            displayName: 'Command Line Script -  Run $(scenarioToRun) K6 scripts'

          - task: ArchiveFiles@2
            displayName: 'Archive test results'
            inputs:
              rootFolderOrFile: $(Agent.BuildDirectory)/s/CT
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/CT.zip
              replaceExistingArchive: true
          - publish: $(Build.ArtifactStagingDirectory)/CT.zip
            displayName: "Publish Artifact results"
            artifact: testResult

          - script: |
              echo output tree:
              chmod +777 src/perf-test/k6/scripttree.sh
              ./src/perf-test/k6/scripttree.sh CT/ 3

            displayName: 'show results'

