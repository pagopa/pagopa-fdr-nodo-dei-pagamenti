# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-22.04'

parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - it
      - prf
      - uat
      - prod
  - name: cronJobName
    displayName: Cron job name (value 'All' for specify all cronjobs)
    type: string
    default: 'All'
  - name: suspend
    displayName: Suspend job?
    type: boolean
    default: true
  - name: deleteSuccessJob
    displayName: (1. Optional) Delete ALL success job?
    type: boolean
    default: false
  - name: deleteFailedOrLongRunningJob
    displayName: (2. Optional) Delete ALL failed or long running job?
    type: boolean
    default: false
  - name: deletePodByStatus
    displayName: (3.Optional) Delete ALL pod by Status?
    type: boolean
    default: false
  - name: deletePodStatus
    displayName: (3.1. Optional) Status pod to delete? (Only if point 3 is checked)
    type: string
    default: Pending
    values:
      - Pending
      - Running
      - Succeeded
      - Failed
      - Unknown

variables:
  k8sNamespace: '$(k8s_namespace)'
  fileName: 'suspend-cron.json'
  ${{ if eq(parameters['ENV'], 'dev') }}:
    kubernetesServiceConnection: '$(dev_kubernetes_service_conn)'
    poolImage: 'pagopa-dev-linux'
    labelSelector: 'app.kubernetes.io/instance=fdr-cron'
  ${{ if eq(parameters['ENV'], 'it') }}:
    kubernetesServiceConnection: '$(dev_kubernetes_service_conn)'
    poolImage: 'pagopa-dev-linux'
    labelSelector: 'app.kubernetes.io/instance=fdr-cron-replica'
  ${{ if eq(parameters['ENV'], 'prf') }}:
    kubernetesServiceConnection: '$(uat_kubernetes_service_conn)'
    poolImage: 'pagopa-uat-linux'
    labelSelector: 'app.kubernetes.io/instance=fdr-cron-replica'
  ${{ if eq(parameters['ENV'], 'uat') }}:
    kubernetesServiceConnection: '$(uat_kubernetes_service_conn)'
    poolImage: 'pagopa-uat-linux'
    labelSelector: 'app.kubernetes.io/instance=fdr-cron'
  ${{ if eq(parameters['ENV'], 'prod') }}:
    kubernetesServiceConnection: '$(prod_kubernetes_service_conn)'
    poolImage: 'pagopa-prod-linux'
    labelSelector: 'app.kubernetes.io/instance=fdr-cron'

stages:
  - stage: suspend_cronjob
    displayName: "Suspend cron-jobs ${{ parameters.ENV }}"
    jobs:
      - deployment: suspend_cronjob
        displayName: "Suspend cron-jobs"
        pool: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - ${{if eq(parameters.cronJobName, 'All') }}:
                  - task: Kubernetes@1
                    displayName: 'Get ALL cronjobs'
                    name: get
                    continueOnError: true
                    inputs:
                      connectionType: Kubernetes Service Connection
                      kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                      namespace: ${{ variables.k8sNamespace }}
                      command: get
                      arguments: cronjob -l ${{ variables.labelSelector }}
                      outputFormat: jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
                - ${{ else }}:
                  - task: Kubernetes@1
                    displayName: 'Get ${{ parameters.cronJobName }} cronjob'
                    name: get
                    continueOnError: true
                    inputs:
                      connectionType: Kubernetes Service Connection
                      kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                      namespace: ${{ variables.k8sNamespace }}
                      command: get
                      arguments: cronjob ${{ parameters.cronJobName }}
                      outputFormat: jsonpath='{.metadata.name}'

                - script: |
                    kubeOutput=$(get.KubectlOutput)
                    fileKubeOutput=$(Pipeline.Workspace)/kubeOutput.txt
                    fileOutput=$(Pipeline.Workspace)/${{ variables.fileName }}
      
                    jobsTot=0
                    rm -f $fileKubeOutput
                    for cronjobname in $kubeOutput; do
                      if [ ! -z "$cronjobname" ]
                      then
                        echo "${cronjobname//,/}" >> $fileKubeOutput
                        jobsTot=$((${jobsTot}+1))
                      fi
                    done
                    
                    echo ""
                    echo "Jobs are: $jobsTot"
                    echo "###"
                    cat $fileKubeOutput
                    echo "###"
                    
      
                    cat << EOF > $fileOutput
                    {
                        "apiVersion": "v1",
                        "kind": "List",
                        "items": [
                    EOF
      
                    index=0
      
                    while IFS= read -r line
                    do
                    cat << EOF >> $fileOutput
                            {
                                "apiVersion": "batch/v1",
                                "kind": "CronJob",
                                "metadata": {
                                    "name": "$line"
                                }
                    EOF
      
                    if [[ $index -lt $((${jobsTot}-1)) ]]
                    then
                        cat << EOF >> $fileOutput
                            },
                    EOF
                    else
                        cat << EOF >> $fileOutput
                            }
                    EOF
                    fi
      
                    index=$((${index}+1))
      
                    done < $fileKubeOutput
      
                    cat << EOF >> $fileOutput
                        ]
                    }
                    EOF

                    echo ""
                    echo "File: $fileOutput"
                    echo "###"
                    cat $fileOutput
                    echo "###"

                  displayName: 'Write ${{ variables.fileName }}'

                - ${{if eq(parameters.suspend, 'True') }}:
                  - task: KubernetesManifest@0
                    displayName: 'Patch cronjobs suspend=true'
                    inputs:
                      kubernetesServiceConnection: ${{ variables.kubernetesServiceConnection }}
                      namespace: ${{ variables.k8sNamespace }}
                      action: patch
                      resourceToPatch: file
                      resourceFiletoPatch: $(Pipeline.Workspace)/${{ variables.fileName }}
                      mergeStrategy: strategic
                      patch: '{"spec":{"suspend": true }}'
                - ${{else}}:
                  - task: KubernetesManifest@0
                    displayName: 'Patch cronjobs suspend=false'
                    inputs:
                      kubernetesServiceConnection: ${{ variables.kubernetesServiceConnection }}
                      namespace: ${{ variables.k8sNamespace }}
                      action: patch
                      resourceToPatch: file
                      resourceFiletoPatch: $(Pipeline.Workspace)/${{ variables.fileName }}
                      mergeStrategy: strategic
                      patch: '{"spec":{"suspend": false }}'

  - ${{if eq(parameters.deleteSuccessJob, 'True') }}:
    - stage: delete_all_success_jobs
      displayName: "Delete ALL success jobs ${{ parameters.ENV }}"
      jobs:
        - deployment: delete_all_success_jobs
          displayName: "Delete ALL success jobs"
          pool: $(poolImage)
          environment: ${{ parameters['ENV'] }}
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: none

                  - task: Kubernetes@1
                    displayName: 'Delete ALL success jobs'
                    name: deleteSuccess
                    continueOnError: true
                    inputs:
                      connectionType: Kubernetes Service Connection
                      kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                      namespace: ${{ variables.k8sNamespace }}
                      command: delete
                      arguments: jobs --field-selector status.successful=1 -l ${{ variables.labelSelector }}

  - ${{if eq(parameters.deleteFailedOrLongRunningJob, 'True') }}:
    - stage: delete_all_failed_or_long_running_jobs
      displayName: "Delete ALL failed or long running jobs ${{ parameters.ENV }}"
      jobs:
        - deployment: delete_all_failed_or_long_running_jobs
          displayName: "Delete ALL failed or long running jobs"
          pool: $(poolImage)
          environment: ${{ parameters['ENV'] }}
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: none

                  - task: Kubernetes@1
                    displayName: 'Delete ALL failed or long running jobs'
                    name: deleteFailed
                    continueOnError: true
                    inputs:
                      connectionType: Kubernetes Service Connection
                      kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                      namespace: ${{ variables.k8sNamespace }}
                      command: delete
                      arguments: jobs --field-selector status.successful=0 -l ${{ variables.labelSelector }}

  - ${{if eq(parameters.deletePodByStatus, 'True') }}:
    - stage: delete_all_pods_by_status
      displayName: "Delete ALL pods by status=${{ parameters.deletePodStatus }} ${{ parameters.ENV }}"
      jobs:
        - deployment: delete_all_pods_by_status
          displayName: "Delete ALL pods by status=${{ parameters.deletePodStatus }}"
          pool: $(poolImage)
          environment: ${{ parameters['ENV'] }}
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: none

                  - task: Kubernetes@1
                    displayName: 'Delete ALL pods by status=${{ parameters.deletePodStatus }}'
                    name: deletePods
                    continueOnError: true
                    inputs:
                      connectionType: Kubernetes Service Connection
                      kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                      namespace: ${{ variables.k8sNamespace }}
                      command: delete
                      arguments: pods --field-selector status.phase=${{ parameters.deletePodStatus }} -l ${{ variables.labelSelector }}