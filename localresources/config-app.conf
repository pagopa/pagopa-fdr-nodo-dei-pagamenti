reference {
  akka {
    management {
      http {
        hostname = 127.0.0.1
        hostname = ${?MANAGEMENT_HTTP_HOST}
        port = 8558
        port = ${?MANAGEMENT_HTTP_PORT}
        bind-hostname = 0.0.0.0
        bind-hostname = ${?MANAGEMENT_HTTP_BIND_HOST}
        bind-port = 8558
        bind-port = ${?MANAGEMENT_HTTP_BIND_PORT}
      }
    }
    remote {
      artery {
        transport = tcp
        canonical{
          hostname = 127.0.0.1
          hostname = ${?REMOTING_HOST}
          port = 2552
          port = ${?REMOTING_PORT}
        }
        bind {
          hostname = 127.0.0.1
          hostname = ${?REMOTING_BIND_HOST}
          port = 2552
          port = ${?REMOTING_BIND_PORT}
        }
        advanced {
          maximum-frame-size = 16 MiB
        }
      }
      log-remote-lifecycle-events = off
    }

    coordinated-shutdown {
      phases {
        service-requests-done {
          timeout=135s
        }
        before-actor-system-terminate {
            timeout=30s
        }
      }
    }
    coordinated-shutdown.exit-jvm = on

    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    http {
      host-connection-pool {
        max-open-requests = 2048
        max-retries = 0
        max-connection-backoff = 1000 ms
        max-connections = 100
      }
      server.parsing.max-content-length = 120m
      server.parsing.max-chunk-size= 120m
      client.parsing.max-chunk-size= 120m
    }
  }
  cinnamon {
    akka {
      actors {
        "/user/*" {
          report-by = class
        }
      }
    }
    prometheus {
      exporters += http-server
      http-server {
        host = 127.0.0.1
        host = ${?PROMETHEUS_HOST}
        port = 9091
        port = ${?PROMETHEUS_PORT}
      }
    }
    slf4j.mdc {
      serialization.limit = 2048 bytes
    }
  }
  cinnamon.akka.http.servers {
    "*:*" {
      paths {
        "*" {
          metrics = on
        }
      }
    }
  }
  cinnamon.akka.http.clients {
    "*:*" {
      paths {
        "*" {
          metrics = on
        }
      }
    }
  }
  azurestorage-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
     fixed-pool-size = 16
    }
    throughput = 1
  }
  config{
    http {
      server-request-timeout = 25
      connect-timeout = 1
    }
  }
  httpactor {
    ssl-config {
#       debug {
#         all = true
#       }
      loose {
        acceptAnyCertificate = true
        allowWeakCiphers = true
        disableHostnameVerification = true
        allowWeakProtocols = true
      }
      disabledSignatureAlgorithms = ["MD2", "MD4", "MD5"]
      disabledKeyAlgorithms = ["DHE keySize < 2048", "ECDH keySize < 2048", "ECDHE keySize < 2048", "RSA keySize < 2048", "DSA keySize < 2048", "EC keySize < 224", "RSA keySize < 1024", "DSA keySize < 1024"]
      trustManager = {
        stores = [{
          path: ${app.bundle.cacerts.path}
        }]
      }
    }
  }
}
app {
    apiConfigCache{
        url=${API_CONFIG_CACHE_URL}
        subscriptionKey=${API_CONFIG_CACHE_SUBSCRIPTION_KEY}
        timeout=30
    }
	adapterEcommerce{
	    url=${ADAPTER_ECOMMERCE_URL}
	}
    pdd-host-header-name=X-Original-Forwarded-For
    configScheduleMinutes=1
    coordinatedShutdown=true
    waitAsyncProcesses=true
    coordinatedShutdownHttpTimeout=130
    coordinatedShutdownTerminationTimeout=20
    routing.useMetrics=true
    bundle.startup.timeout=120
    bundle.checkUTF8=true
    bundleTimeoutSeconds=600#10 minuti
    azure-storage {
        blob-name = ${AZURE_STORAGE_BLOB_NAME}
        table-name = ${AZURE_STORAGE_TABLE_NAME}
        connection-string = ${AZURE_STORAGE_CONNECTION_STRING}
    }
	azure-cosmos {
		endpoint = ${AZURE_COSMOS_ENDPOINT}
		key = ${AZURE_COSMOS_KEY}
		db-name = ${AZURE_COSMOS_DB_NAME}
		table-name = ${AZURE_COSMOS_TABLE_NAME}
	}
    micrometer {
        http-server {
            host = 127.0.0.1
            host = ${?MICROMETER_HOST}
            port = 9092
            port = ${?MICROMETER_PORT}
            hostname = "fdr-micrometer"
            hostname = ${?MICROMETER_HOSTNAME}
        }
    }
}